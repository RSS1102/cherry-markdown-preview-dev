name: PR Merge Client Dev Preview (Windows Only)

on:
  pull_request_target:
    types: [closed]
    paths: 
      - "packages/client/**"

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  dev-deploy:
    if: github.event.pull_request.merged == true
    runs-on: windows-latest  # 仅保留 Windows 环境

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Windows dependencies
        run: |
          # 安装 WebView2 运行时
          curl -LO https://go.microsoft.com/fwlink/p/?LinkId=2124703 || exit 1
          ./MicrosoftEdgeWebview2Setup.exe /silent /install || exit 1
          
          # 配置 Wix 工具链
          mkdir -p "${{ github.workspace }}/.tauri/WixTools314"
          curl -L https://github.com/tauri-apps/binary-releases/releases/download/wix-3.14.0/wix314-binaries.zip -o wix.zip
          unzip wix.zip -d "${{ github.workspace }}/.tauri/WixTools314"

      - name: Get Merge Commit SHA
        run: echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Set Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Install project dependencies
        working-directory: ./packages/client
        run: yarn install

      - name: Build Tauri Application
        working-directory: ./packages/client
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo tauri build --target x86_64-pc-windows-msvc

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-windows-build
          path: packages/client/src-tauri/target/release/bundle/msi/*.msi  # 修正为 Tauri 默认的 MSI 路径

      - name: Update PR Comment with Artifact Link
        if: always()
        uses: actions/github-script@v7
        env:
          ARTIFACT_NAME: client-windows-build
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              issue_number: context.issue.number
            });

            // 获取 Artifact 下载链接
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}?check_suite_focus=true#artifacts`;

            const commentBody = `## 🚀 Windows 构建结果
            ✅ 构建成功！下载链接：
            - Artifact: [${process.env.ARTIFACT_NAME}](${artifactUrl})
            - Commit SHA: \`${{ env.COMMIT_SHORT_SHA }}\``;

            const existingComment = comments.find(c => c.body.includes('Windows 构建结果'));
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                body: commentBody
              });
            }
