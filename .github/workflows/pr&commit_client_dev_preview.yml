name: PR Merge Client Dev Preview (Windows Only)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  # pull_request_target:
  #   types: [closed]
  #   paths: 
  #     - "packages/client/**"

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            args: "--target aarch64-apple-darwin"
          - platform: macos-latest
            target: x86_64-apple-darwin
            args: "--target x86_64-apple-darwin"
          - platform: ubuntu-latest
            target: ""
            args: ""
          - platform: windows-latest
            target: ""
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Ensure x86_64 Target is Installed
        if: matrix.target == 'x86_64-apple-darwin'
        run: rustup target add x86_64-apple-darwin

      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build Tauri
        run: |
          yarn --network-timeout 100000
          yarn build
          yarn build:client ${{ matrix.args }}

      # ========== 新增路径打印步骤 ========== [3,5](@ref)
      - name: Print Artifact Paths
        working-directory: ./packages/client
        shell: bash
        run: |
          # 动态安装 tree 命令
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y tree
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install tree
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install tree -y
          fi
      
          # 输出目录树
          BUILD_DIR="src-tauri/target"
          if [ -d "$BUILD_DIR" ]; then
            echo "目录结构："
            tree "$BUILD_DIR" -a -L 3  # 显示3层目录及隐藏文件
          else
            echo "错误：目录 $BUILD_DIR 不存在！"
            exit 1
          fi
