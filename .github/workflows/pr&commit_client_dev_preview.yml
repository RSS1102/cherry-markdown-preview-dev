name: PR Merge Client Dev Preview

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  build-and-comment:
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            path_patterns: "packages/client/**/*.json"
          - platform: windows-latest
            path_patterns: "packages/client/**/*.json"
          - platform: ubuntu-latest
            path_patterns: "packages/client/**/*.json"

    steps:
      - uses: actions/checkout@v4

      - name: Generate Unique ID
        id: uid
        run: echo "UNIQUE_ID=${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.platform }}" >> $GITHUB_ENV

      - name: Find JSON Files
        id: finder
        uses: dawidd6/action-find-files@v3
        with:
          directory: .
          patterns: ${{ matrix.path_patterns }}
          find_options: "-type f"
          separator: "\n"

      - name: Upload Artifacts
        if: ${{ steps.finder.outputs.files != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: json-files-${{ env.UNIQUE_ID }}
          path: ${{ steps.finder.outputs.files }}
          retention-days: 7

  comment-pr:
    name: Update PR Comment
    runs-on: ubuntu-latest
    needs: build-and-comment
    permissions:
      pull-requests: write
    steps:
      - name: Dynamic PR Comment
        uses: actions/github-script@v5
        with:
          script: |
            const { owner, repo } = context.repo;
            const runId = context.runId;
            
            // 获取构件页面链接
            const artifactsUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
            const message = `📁 ​**JSON 文件已生成**\n下载地址：${artifactsUrl}`;
            const marker = '<!-- JSON_FILES_MARKER -->';

            // 查找/更新评论
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => comment.body.includes(marker));
            const commentBody = `${marker}\n${message}`;

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
